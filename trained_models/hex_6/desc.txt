LAYERS:
self.conv_layers = nn.Sequential(
            nn.Conv2d(3, 64, 3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.Conv2d(64, 64, 3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.Conv2d(64, 2, 1),
            nn.BatchNorm2d(2),
            nn.ReLU(),
            nn.Flatten(start_dim=1)
    )
conv_output_size = self.get_output_shape()

self.output = nn.Sequential(
            nn.Linear(conv_output_size[1], output_size),
            nn.Softmax(dim=-1)
    )

OPTIMIZER + SCHEDULER:
optimizer = torch.optim.Adam(ann.model.parameters(), lr=0.02)
scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(
    optimizer, 'min', patience=15, factor=0.4, eps=5e-5)

Batchsize: 128
Replay buffer: Replace rbuf = rbuf[200:] when len(rbuf) > 500. Start training when rbuf > 256

MCTS:
searchtime = 1.5 s
c_ucb = 1.2
eps = 0.1